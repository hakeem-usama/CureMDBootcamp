using System;
using System.Collections.Generic;

// ITransaction interface
interface ITransaction
{
    void ExecuteTransaction(decimal amount); // Realization/Implementation
    void PrintTransaction(); // Realization/Implementation
}

// Transaction class
class Transaction
{
    public DateTime Date { get; set; }
    public string Type { get; set; }
    public decimal Amount { get; set; }

    public Transaction(DateTime date, string type, decimal amount)
    {
        Date = date;
        Type = type;
        Amount = amount;
    }
}

// BankAccount abstract class
abstract class BankAccount
{
    private int accountNumber; // Encapsulation
    private string accountHolderName; // Encapsulation
    private decimal balance; // Encapsulation
    private List<Transaction> transactions; // Association

    public int AccountNumber
    {
        get { return accountNumber; } // Encapsulation
        set { accountNumber = value; } // Encapsulation
    }

    public string AccountHolderName
    {
        get { return accountHolderName; } // Encapsulation
        set { accountHolderName = value; } // Encapsulation
    }

    public decimal Balance
    {
        get { return balance; } // Encapsulation
        set { balance = value; } // Encapsulation
    }

    public List<Transaction> Transactions
    {
        get { return transactions; } // Association
    }

    public BankAccount(int accountNumber, string accountHolderName, decimal balance)
    {
        AccountNumber = accountNumber; // Encapsulation
        AccountHolderName = accountHolderName; // Encapsulation
        Balance = balance; // Encapsulation
        transactions = new List<Transaction>(); // Association
    }

    public abstract void DisplayAccountInfo(); // Abstraction

    public virtual void Deposit(decimal amount) // Polymorphism (Method Overloading)
    {
        Balance += amount; // Encapsulation
        AddTransaction("Deposit", amount); // Association
        Console.WriteLine($"Deposited {amount:C}. New balance: {Balance:C}");
    }

    public virtual void Withdraw(decimal amount) // Polymorphism (Method Overloading)
    {
        if (amount <= Balance) // Encapsulation
        {
            Balance -= amount; // Encapsulation
            AddTransaction("Withdrawal", amount); // Association
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {Balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }

    protected void AddTransaction(string type, decimal amount) // Encapsulation
    {
        Transaction transaction = new Transaction(DateTime.Now, type, amount); // Association
        transactions.Add(transaction); // Association
    }
}

// SavingsAccount class
class SavingsAccount : BankAccount, ITransaction
{
    private double interestRate; // Encapsulation

    public double InterestRate
    {
        get { return interestRate; } // Encapsulation
        set { interestRate = value; } // Encapsulation
    }

    public SavingsAccount(int accountNumber, string accountHolderName, decimal balance, double interestRate)
        : base(accountNumber, accountHolderName, balance)
    {
        InterestRate = interestRate; // Encapsulation
    }

    public override void DisplayAccountInfo() // Abstraction
    {
        Console.WriteLine("Account Type: Savings Account");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Account Holder: {AccountHolderName}"); // Encapsulation
        Console.WriteLine($"Balance: {Balance:C}"); // Encapsulation
        Console.WriteLine($"Interest Rate: {InterestRate:P}"); // Encapsulation
    }

    public override void Withdraw(decimal amount) // Polymorphism (Method Overriding)
    {
        if (amount <= Balance) // Encapsulation
        {
            Balance -= amount; // Encapsulation
            AddTransaction("Withdrawal", amount); // Association
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {Balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }

    public void ExecuteTransaction(decimal amount) // Realization/Implementation
    {
        Deposit(amount);
    }

    public void PrintTransaction() // Realization/Implementation
    {
        Console.WriteLine("Savings Account Transaction");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Amount: {InterestRate:C}"); // Encapsulation
    }
}

// CheckingAccount class
class CheckingAccount : BankAccount, ITransaction
{
    public CheckingAccount(int accountNumber, string accountHolderName, decimal balance)
        : base(accountNumber, accountHolderName, balance)
    {
    }

    public override void DisplayAccountInfo() // Abstraction
    {
        Console.WriteLine("Account Type: Checking Account");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Account Holder: {AccountHolderName}"); // Encapsulation
        Console.WriteLine($"Balance: {Balance:C}"); // Encapsulation
    }

    public void ExecuteTransaction(decimal amount) // Realization/Implementation
    {
        Withdraw(amount);
    }

    public void PrintTransaction() // Realization/Implementation
    {
        Console.WriteLine("Checking Account Transaction");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Amount: {Balance:C}"); // Encapsulation
    }
}

// LoanAccount class
class LoanAccount : BankAccount, ITransaction
{
    private double interestRate; // Encapsulation

    public double InterestRate
    {
        get { return interestRate; } // Encapsulation
        set { interestRate = value; } // Encapsulation
    }

    public LoanAccount(int accountNumber, string accountHolderName, decimal balance, double interestRate)
        : base(accountNumber, accountHolderName, balance)
    {
        InterestRate = interestRate; // Encapsulation
    }

    public override void DisplayAccountInfo() // Abstraction
    {
        Console.WriteLine("Account Type: Loan Account");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Account Holder: {AccountHolderName}"); // Encapsulation
        Console.WriteLine($"Balance: {Balance:C}"); // Encapsulation
        Console.WriteLine($"Interest Rate: {InterestRate:P}"); // Encapsulation
    }

    public override void Deposit(decimal amount) // Polymorphism (Method Overriding)
    {
        Balance -= amount; // Encapsulation
        AddTransaction("Payment", amount); // Association
        Console.WriteLine($"Payment of {amount:C} made. New balance: {Balance:C}");
    }

    public void ExecuteTransaction(decimal amount) // Realization/Implementation
    {
        Deposit(amount);
    }

    public void PrintTransaction() // Realization/Implementation
    {
        Console.WriteLine("Loan Account Transaction");
        Console.WriteLine($"Account Number: {AccountNumber}"); // Encapsulation
        Console.WriteLine($"Amount: {InterestRate:C}"); // Encapsulation
    }
}

// Bank class
class Bank
{
    private Dictionary<int, BankAccount> accounts; // Association (Aggregation)

    public Bank()
    {
        accounts = new Dictionary<int, BankAccount>();
    }

    public void AddAccount(BankAccount account) // Association
    {
        accounts.Add(account.AccountNumber, account); // Association
        Console.WriteLine("Account added successfully.");
    }

    public void DepositToAccount(int accountNumber, decimal amount)
    {
        if (accounts.ContainsKey(accountNumber)) // Association
        {
            accounts[accountNumber].Deposit(amount); // Association
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }

    public void WithdrawFromAccount(int accountNumber, decimal amount)
    {
        if (accounts.ContainsKey(accountNumber)) // Association
        {
            accounts[accountNumber].Withdraw(amount); // Association
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }

    public void PrintTransactionHistory(int accountNumber)
    {
        if (accounts.ContainsKey(accountNumber)) // Association
        {
            BankAccount account = accounts[accountNumber]; // Association
            Console.WriteLine($"Transaction History for Account Number: {accountNumber}");
            foreach (Transaction transaction in account.Transactions) // Association
            {
                Console.WriteLine($"{transaction.Date} - {transaction.Type}: {transaction.Amount:C}");
            }
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }
}

// Main program
class Program
{
    static void Main(string[] args)
    {
        Bank bank = new Bank(); // Association (Dependency)

        SavingsAccount savingsAccount = new SavingsAccount(123, "John Doe", 1000, 0.05); // Inheritance, Polymorphism
        bank.AddAccount(savingsAccount); // Association (Aggregation)

        CheckingAccount checkingAccount = new CheckingAccount(456, "Jane Smith", 500); // Inheritance, Polymorphism
        bank.AddAccount(checkingAccount); // Association (Aggregation)

        LoanAccount loanAccount = new LoanAccount(789, "Alice Johnson", 2000, 0.1); // Inheritance, Polymorphism
        bank.AddAccount(loanAccount); // Association (Aggregation)

        bank.DepositToAccount(123, 500); // Association
        bank.WithdrawFromAccount(123, 2000); // Association

        bank.DepositToAccount(456, 200); // Association
        bank.WithdrawFromAccount(456, 700); // Association

        bank.DepositToAccount(789, 1000); // Association
        bank.WithdrawFromAccount(789, 3000); // Association

        bank.PrintTransactionHistory(123); // Association
        bank.PrintTransactionHistory(456); // Association
        bank.PrintTransactionHistory(789); // Association

        Console.ReadLine();
    }
}

I have added comments throughout the code to indicate where the OOP relationships and concepts are used:

Association: The Bank class is associated with the BankAccount class as it manages the different bank accounts. This association is present in the AddAccount, DepositToAccount, WithdrawFromAccount, and PrintTransactionHistory methods of the Bank class.
Aggregation: The Bank class contains a dictionary of BankAccount objects, representing an aggregation relationship. This is visible in the accounts dictionary in the Bank class.
Dependency: The BankAccount objects are dependent on the Bank object as the bank account objects need the bank object for their creation. This dependency is present in the AddAccount, DepositToAccount, WithdrawFromAccount, and PrintTransactionHistory methods of the Bank class.
Realization/Implementation: The SavingsAccount, CheckingAccount, and LoanAccount classes realize the ITransaction interface, implementing the ExecuteTransaction and PrintTransaction methods.
Encapsulation: Encapsulation is used to hide the internal details and protect the data within objects. The private data members (accountNumber, accountHolderName, balance) in the BankAccount class are encapsulated, and public methods are provided for accessing and modifying these properties.
Inheritance: The SavingsAccount, CheckingAccount, and LoanAccount classes inherit from the BankAccount class, allowing them to inherit common properties and behaviors while providing their own unique implementations.
Abstraction: The BankAccount class is an abstraction that provides a common template for bank accounts, and the DisplayAccountInfo method is declared as an abstract method to enforce its implementation in subclasses.
Polymorphism: Polymorphism is achieved through method overriding in the subclasses (SavingsAccount, CheckingAccount, LoanAccount), where the CalculateInterest method is overridden to provide unique interest calculations. Method overloading is used in the BankAccount class to support different ways of depositing or withdrawing money.
The comments highlight the usage of these relationships and concepts throughout the code.